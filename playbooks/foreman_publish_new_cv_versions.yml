---
- name: 'Publish new Content View Versions'
  hosts: 'foreman'
  gather_facts: false
  vars_prompt:
    - name: 'input_cvs'
      prompt: |
        Which CVs, separated by commas, would you like to update?

        all                     = all CVs will be updated, new COV(s) will be published
        CV product1,CV product2 = selected CVs will be updated, a new COV will be published
        none                    = no CVs will be updated, the COVs will be promoted to the selected Lifecycles

        Use 'none' for promoting existing versions to other Lifecycles, define CVs if you want to make new versions

        NOTE: You MUST follow the Lifecycle Paths. If you want to force an update anyway, set foreman_force_promote to true
      default: 'all'
      private: false

    - name: 'input_envs'
      prompt: 'Which Lifecycle environments, separated by commas, should have the latest COV available?'
      default: 'Development'
      private: false

  tasks:
    - name: 'Process input'
      ansible.builtin.set_fact:
        input_cvs_list: []

    - name: 'Process input'
      ansible.builtin.set_fact:
        input_cvs_list: "{{ input_cvs.split(',') }}"
      when:
        - input_cvs != 'all'
        - input_cvs != 'none'

    - name: 'Process input'
      when: input_cvs == 'all'
      block:
        - name: 'Get all CVs from Foreman'
          theforeman.foreman.resource_info:
            username: "{{ foreman_admin_user }}"
            password: "{{ foreman_admin_password }}"
            server_url: "{{ foreman_url }}"
            validate_certs: "{{ foreman_validate_certs }}"
            organization: "{{ foreman_organization }}"
            resource: 'content_views'
            search: 'name ~ CV *'
          register: 'content_view_info'

        - name: 'Process output'
          ansible.builtin.set_fact:
            input_cvs_list: "{{ input_cvs_list + [item['name']] }}"
          loop: "{{ content_view_info['resources'] }}"

    - name: 'Process input'
      ansible.builtin.set_fact:
        input_env_list: "{{ input_envs.split(',') }}"

    - name: 'Publish new CV versions'
      theforeman.foreman.content_view_version:
        username: "{{ foreman_admin_user }}"
        password: "{{ foreman_admin_password }}"
        server_url: "{{ foreman_url }}"
        validate_certs: "{{ foreman_validate_certs }}"
        organization: "{{ foreman_organization }}"
        content_view: "{{ content_view }}"
      loop: "{{ input_cvs_list }}"
      loop_control:
        loop_var: 'content_view'
      register: 'content_view_published'

    - name: 'Wait for COV autopublish to settle'
      ansible.builtin.pause:
        minutes: "{{ foreman_publish_pause | default(5) }}"
      when: input_cvs_list | length > 0

    - name: 'Publish new version for all COVs for selected Lifecycle environments'  # noqa no-handler
      theforeman.foreman.content_view_version:
        username: "{{ foreman_admin_user }}"
        password: "{{ foreman_admin_password }}"
        server_url: "{{ foreman_url }}"
        validate_certs: "{{ foreman_validate_certs }}"
        organization: "{{ foreman_organization }}"
        content_view: "{{ comp_content_view.name }}"
        lifecycle_environments: "{{ input_env_list }}"
        current_lifecycle_environment: 'Library'
        force_yum_metadata_regeneration: true
      loop: "{{ foreman_composite_content_views }}"
      loop_control:
        loop_var: 'comp_content_view'
      when: content_view_published['changed']

    - name: 'Promote all COVs for selected Lifecycle environments'  # noqa no-handler
      theforeman.foreman.content_view_version:
        username: "{{ foreman_admin_user }}"
        password: "{{ foreman_admin_password }}"
        server_url: "{{ foreman_url }}"
        validate_certs: "{{ foreman_validate_certs }}"
        organization: "{{ foreman_organization }}"
        content_view: "{{ comp_content_view['name'] }}"
        force_promote: "{{ foreman_force_promote | default(false) }}"
        lifecycle_environments: "{{ input_env_list }}"
        current_lifecycle_environment: 'Library'
        force_yum_metadata_regeneration: true
      loop: "{{ foreman_composite_content_views }}"
      loop_control:
        loop_var: 'comp_content_view'
      when: not content_view_published['changed'] or content_view_published['changed'] is not defined
